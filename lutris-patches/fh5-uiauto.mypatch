From 822c137a52117c03f205ad6b0af71d765983f724 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 10 Nov 2021 20:14:12 +0300
Subject: [PATCH] windows.media.speech: Add static stub ISpeechSynthesizer
 iface to windows_media_speech class.

CW-Bug-Id: #19618

For FH5.
---
 dlls/windows.media.speech/main.c          | 114 +++++++++++++++++++++-
 include/windows.media.speechsynthesis.idl |  13 +++
 2 files changed, 126 insertions(+), 1 deletion(-)

diff --git a/dlls/windows.media.speech/main.c b/dlls/windows.media.speech/main.c
index 31847a2eb6a..b1f157599d1 100644
--- a/dlls/windows.media.speech/main.c
+++ b/dlls/windows.media.speech/main.c
@@ -175,6 +175,7 @@ struct windows_media_speech
 {
     IActivationFactory IActivationFactory_iface;
     IInstalledVoicesStatic IInstalledVoicesStatic_iface;
+    ISpeechSynthesizer ISpeechSynthesizer_iface;
     LONG ref;
 };

@@ -188,6 +189,11 @@ static inline struct windows_media_speech *impl_from_IInstalledVoicesStatic(IIns
     return CONTAINING_RECORD(iface, struct windows_media_speech, IInstalledVoicesStatic_iface);
 }

+static inline struct windows_media_speech *impl_from_ISpeechSynthesizer(ISpeechSynthesizer *iface)
+{
+    return CONTAINING_RECORD(iface, struct windows_media_speech, ISpeechSynthesizer_iface);
+}
+
 static HRESULT STDMETHODCALLTYPE windows_media_speech_QueryInterface(
         IActivationFactory *iface, REFIID iid, void **out)
 {
@@ -212,6 +218,13 @@ static HRESULT STDMETHODCALLTYPE windows_media_speech_QueryInterface(
         return S_OK;
     }

+    if (IsEqualGUID(iid, &IID_ISpeechSynthesizer))
+    {
+        IUnknown_AddRef(iface);
+        *out = &impl->ISpeechSynthesizer_iface;
+        return S_OK;
+    }
+
     FIXME("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
     *out = NULL;
     return E_NOINTERFACE;
@@ -260,7 +273,11 @@ static HRESULT STDMETHODCALLTYPE windows_media_speech_ActivateInstance(
         IActivationFactory *iface, IInspectable **instance)
 {
     FIXME("iface %p, instance %p stub!\n", iface, instance);
-    return E_NOTIMPL;
+
+    IActivationFactory_AddRef(iface);
+    *instance = (IInspectable *)iface;
+
+    return S_OK;
 }

 static const struct IActivationFactoryVtbl activation_factory_vtbl =
@@ -348,10 +365,105 @@ static const struct IInstalledVoicesStaticVtbl installed_voices_static_vtbl =
     installed_voices_static_get_DefaultVoice,
 };

+static HRESULT STDMETHODCALLTYPE speech_synthesizer_QueryInterface(
+        ISpeechSynthesizer *iface, REFIID iid, void **out)
+{
+    struct windows_media_speech *impl = impl_from_ISpeechSynthesizer(iface);
+
+    return windows_media_speech_QueryInterface(&impl->IActivationFactory_iface, iid, out);
+}
+
+static ULONG STDMETHODCALLTYPE speech_synthesizer_AddRef(
+        ISpeechSynthesizer *iface)
+{
+    struct windows_media_speech *impl = impl_from_ISpeechSynthesizer(iface);
+
+    return windows_media_speech_AddRef(&impl->IActivationFactory_iface);
+}
+
+static ULONG STDMETHODCALLTYPE speech_synthesizer_Release(
+        ISpeechSynthesizer *iface)
+{
+    struct windows_media_speech *impl = impl_from_ISpeechSynthesizer(iface);
+
+    return windows_media_speech_Release(&impl->IActivationFactory_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_GetIids(
+        ISpeechSynthesizer *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub.\n", iface, iid_count, iids);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_GetRuntimeClassName(
+        ISpeechSynthesizer *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub.\n", iface, class_name);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_GetTrustLevel(
+        ISpeechSynthesizer *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub.\n", iface, trust_level);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_SynthesizeTextToStreamAsync(ISpeechSynthesizer *iface,
+        HSTRING text, IUnknown **operation)
+{
+    FIXME("iface %p, text %p, operation %p stub.\n", iface, text, operation);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_SynthesizeSsmlToStreamAsync(ISpeechSynthesizer *iface,
+        HSTRING ssml, IUnknown **operation)
+{
+    FIXME("iface %p, text %p, operation %p stub.\n", iface, ssml, operation);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_put_Voice(ISpeechSynthesizer *iface, IVoiceInformation *value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE speech_synthesizer_get_Voice(ISpeechSynthesizer *iface, IVoiceInformation **value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    return E_NOTIMPL;
+}
+
+static const struct ISpeechSynthesizerVtbl speech_synthesizer_vtbl =
+{
+    speech_synthesizer_QueryInterface,
+    speech_synthesizer_AddRef,
+    speech_synthesizer_Release,
+    /* IInspectable methods */
+    speech_synthesizer_GetIids,
+    speech_synthesizer_GetRuntimeClassName,
+    speech_synthesizer_GetTrustLevel,
+    /* ISpeechSynthesizer methods */
+    speech_synthesizer_SynthesizeTextToStreamAsync,
+    speech_synthesizer_SynthesizeSsmlToStreamAsync,
+    speech_synthesizer_put_Voice,
+    speech_synthesizer_get_Voice,
+};
+
 static struct windows_media_speech windows_media_speech =
 {
     {&activation_factory_vtbl},
     {&installed_voices_static_vtbl},
+    {&speech_synthesizer_vtbl},
     1
 };

diff --git a/include/windows.media.speechsynthesis.idl b/include/windows.media.speechsynthesis.idl
index af4466681dc..f42300c3740 100644
--- a/include/windows.media.speechsynthesis.idl
+++ b/include/windows.media.speechsynthesis.idl
@@ -63,6 +63,19 @@ namespace Windows {
                 Female = 1
             };

+            [
+                contract(Windows.Foundation.UniversalApiContract, 1.0),
+                exclusiveto(Windows.Media.SpeechSynthesis.SpeechSynthesizer),
+                uuid(ce9f7c76-97f4-4ced-ad68-d51c458e45c6)
+            ]
+            interface ISpeechSynthesizer : IInspectable
+            {
+                HRESULT SynthesizeTextToStreamAsync([in] HSTRING text, [out] IUnknown **operation);
+                HRESULT SynthesizeSsmlToStreamAsync([in] HSTRING Ssml, [out] IUnknown **operation);
+                [propput] HRESULT Voice(VoiceInformation *value);
+                [propget] HRESULT Voice(VoiceInformation **value);
+            }
+
             [
                 contract(Windows.Foundation.UniversalApiContract, 1.0),
                 exclusiveto(Windows.Media.SpeechSynthesis.VoiceInformation),
From ed0d3339339b397b305ef218c6dcec46f789101e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 8 Nov 2021 20:51:12 +0300
Subject: [PATCH] kernelbase: Fake success in some Perf function stubs.

CW-Bug-Id: #19618

For FH5.
---
 dlls/kernelbase/main.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/dlls/kernelbase/main.c b/dlls/kernelbase/main.c
index b90ee1cba2c..00eae890c94 100644
--- a/dlls/kernelbase/main.c
+++ b/dlls/kernelbase/main.c
@@ -146,8 +146,11 @@ LONG WINAPI AppPolicyGetWindowingModel(HANDLE token, AppPolicyWindowingModel *po
 PPERF_COUNTERSET_INSTANCE WINAPI PerfCreateInstance(HANDLE handle, LPCGUID guid,
                                                     const WCHAR *name, ULONG id)
 {
+    static PERF_COUNTERSET_INSTANCE instance;
+
     FIXME("%p %s %s %u: stub\n", handle, debugstr_guid(guid), debugstr_w(name), id);
-    return NULL;
+
+    return &instance;
 }

 /***********************************************************************
@@ -165,7 +168,8 @@ ULONG WINAPI PerfDeleteInstance(HANDLE provider, PPERF_COUNTERSET_INSTANCE block
 ULONG WINAPI PerfSetCounterSetInfo(HANDLE handle, PPERF_COUNTERSET_INFO template, ULONG size)
 {
     FIXME("%p %p %u: stub\n", handle, template, size);
-    return ERROR_CALL_NOT_IMPLEMENTED;
+
+    return ERROR_SUCCESS;
 }

 /***********************************************************************
@@ -175,7 +179,8 @@ ULONG WINAPI PerfSetCounterRefValue(HANDLE provider, PPERF_COUNTERSET_INSTANCE i
                                     ULONG counterid, void *address)
 {
     FIXME("%p %p %u %p: stub\n", provider, instance, counterid, address);
-    return ERROR_CALL_NOT_IMPLEMENTED;
+
+    return ERROR_SUCCESS;
 }

 /***********************************************************************
@@ -193,7 +198,9 @@ ULONG WINAPI PerfStartProvider(GUID *guid, PERFLIBREQUEST callback, HANDLE *prov
 ULONG WINAPI PerfStartProviderEx(GUID *guid, PPERF_PROVIDER_CONTEXT context, HANDLE *provider)
 {
     FIXME("%s %p %p: stub\n", debugstr_guid(guid), context, provider);
-    return ERROR_CALL_NOT_IMPLEMENTED;
+
+    *provider = (HANDLE)0xdeadbeef;
+    return ERROR_SUCCESS;
 }

 /***********************************************************************
