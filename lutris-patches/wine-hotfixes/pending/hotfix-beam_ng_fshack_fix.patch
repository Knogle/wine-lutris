diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index d48575c0f0b..9076038274b 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -779,16 +779,20 @@ static void send_mouse_input( HWND hwnd, Window window, unsigned int state, INPU
             last_cursor_change = input->u.mi.time;
         }
 
-        pt.x = clip_rect.left;
-        pt.y = clip_rect.top;
-        fs_hack_point_user_to_real(&pt);
-
-        pt.x += input->u.mi.dx;
-        pt.y += input->u.mi.dy;
-        fs_hack_point_real_to_user(&pt);
-
-        input->u.mi.dx = pt.x;
-        input->u.mi.dy = pt.y;
+        /* For some reason BeamNG.drive right click camera control breaks with this, so don't use it with that game */
+        const char *sgi = getenv("SteamGameId");
+        if ((sgi && strcmp(sgi, "284160"))) {
+            pt.x = clip_rect.left;
+            pt.y = clip_rect.top;
+            fs_hack_point_user_to_real(&pt);
+
+            pt.x += input->u.mi.dx;
+            pt.y += input->u.mi.dy;
+            fs_hack_point_real_to_user(&pt);
+
+            input->u.mi.dx = pt.x;
+            input->u.mi.dy = pt.y;
+        }
 
         __wine_send_input( hwnd, input, NULL );
         return;
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 042cc19a386..e10d5c75cc7 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -854,6 +854,19 @@ static void send_mouse_input( HWND hwnd, Window window, unsigned int state, INPU
             pt.y += input->u.mi.dy;
             fs_hack_point_real_to_user(&pt);

+            input->u.mi.dx = pt.x;
+            input->u.mi.dy = pt.y;
+        } else if (!sgi) {
+        /* I'm too lazy to add this to the above check, so I'm just re-adding it as a second check. Bite me. */
+        /* We need to make sure this code is still in the fullscreen hack in case people run non-steam games with it. */
+            pt.x = clip_rect.left;
+            pt.y = clip_rect.top;
+            fs_hack_point_user_to_real(&pt);
+
+            pt.x += input->u.mi.dx;
+            pt.y += input->u.mi.dy;
+            fs_hack_point_real_to_user(&pt);
+
             input->u.mi.dx = pt.x;
             input->u.mi.dy = pt.y;
         }
